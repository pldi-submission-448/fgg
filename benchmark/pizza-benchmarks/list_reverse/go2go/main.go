// Code generated by go2go; DO NOT EDIT.


//line main.go2:1
package main

//line main.go2:1
import (
//line main.go2:1
 "fmt"
//line main.go2:1
 "strconv"
//line main.go2:1
)

//line main.go2:83
func BenchmarkStaticListReverse() {
	fmt.Println(1)
	const iterations = 10000
	a := make([]int, iterations)
	for i := 0; i < iterations; i++ {
		a[i] = i
	}
	l := instantiate୦୦MakeListFromArray୦int(a)
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
		l = instantiate୦୦StaticReverse୦int(l)
	}
	fmt.Println(2)
	a1 := make([]string, iterations)
	for i := 0; i < iterations; i++ {
		a1[i] = strconv.Itoa(i)
	}
	l1 := instantiate୦୦MakeListFromArray୦string(a1)
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
		l1 = instantiate୦୦StaticReverse୦string(l1)
	}

//line main.go2:111
}

func BenchmarkInstanceListReverse() {
	fmt.Println(3)
	const iterations = 10000
	a := make([]int, iterations)
	for i := 0; i < iterations; i++ {
		a[i] = i
	}
	l := instantiate୦୦MakeListFromArray୦int(a)
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
		l = l.Reverse()
	}
	fmt.Println(4)
	a1 := make([]string, iterations)
	for i := 0; i < iterations; i++ {
		a1[i] = strconv.Itoa(i)
	}
	l1 := instantiate୦୦MakeListFromArray୦string(a1)
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
		l1 = l1.Reverse()
	}
	fmt.Println(5)
}

func main() {
	BenchmarkStaticListReverse()
	BenchmarkInstanceListReverse()
}
//line main.go2:72
func instantiate୦୦MakeListFromArray୦int(a []int) instantiate୦୦List୦int {
	var xs instantiate୦୦List୦int = instantiate୦୦Nil୦int{}
	for i := len(a) - 1; i >= 0; i-- {
		xs = instantiate୦୦Cons୦int{
			head: a[i],
			tail: xs,
		}
	}
	return xs
}
//line main.go2:40
func instantiate୦୦StaticReverse୦int(xs instantiate୦୦List୦int,) instantiate୦୦List୦int {
	var ys instantiate୦୦List୦int = instantiate୦୦Nil୦int{}
	for {
		if _, ok := xs.(instantiate୦୦Nil୦int); ok {
			return ys
		}
		if _xs, ok := xs.(instantiate୦୦Cons୦int); ok {
			ys = instantiate୦୦Cons୦int{
				head: _xs.head,
				tail: ys,
			}
			xs = _xs.tail
		}
	}
}

//line main.go2:72
func instantiate୦୦MakeListFromArray୦string(a []string) instantiate୦୦List୦string {
	var xs instantiate୦୦List୦string = instantiate୦୦Nil୦string{}
	for i := len(a) - 1; i >= 0; i-- {
		xs = instantiate୦୦Cons୦string{
			head: a[i],
			tail: xs,
		}
	}
	return xs
}
//line main.go2:40
func instantiate୦୦StaticReverse୦string(xs instantiate୦୦List୦string,) instantiate୦୦List୦string {
	var ys instantiate୦୦List୦string = instantiate୦୦Nil୦string{}
	for {
		if _, ok := xs.(instantiate୦୦Nil୦string); ok {
			return ys
		}
		if _xs, ok := xs.(instantiate୦୦Cons୦string); ok {
			ys = instantiate୦୦Cons୦string{
				head: _xs.head,
				tail: ys,
			}
			xs = _xs.tail
		}
	}
}

//line main.go2:54
type instantiate୦୦List୦int interface {
//line main.go2:7
 Reverse() instantiate୦୦List୦int
}
//line main.go2:8
type instantiate୦୦Nil୦int struct{}

//line main.go2:36
func (this instantiate୦୦Nil୦int,) Reverse() instantiate୦୦List୦int {
	return this
}

//line main.go2:38
type instantiate୦୦Cons୦int struct {
//line main.go2:12
 head int
			tail instantiate୦୦List୦int
}

func (this instantiate୦୦Cons୦int,) Reverse() instantiate୦୦List୦int {
	var xs instantiate୦୦List୦int = this
	var ys instantiate୦୦List୦int = instantiate୦୦Nil୦int{}
	for {
		if _, ok := xs.(instantiate୦୦Nil୦int); ok {
			return ys
		}
		if _xs, ok := xs.(instantiate୦୦Cons୦int); ok {
			ys = instantiate୦୦Cons୦int{
				head: _xs.head,
				tail: ys,
			}
			xs = _xs.tail
		}
	}
}

//line main.go2:62
func (l instantiate୦୦Cons୦int,) append(last int) instantiate୦୦List୦int {
	var newTail instantiate୦୦List୦int
	if _, ok := l.tail.(instantiate୦୦Nil୦int); ok {
		newTail = instantiate୦୦Cons୦int{last, instantiate୦୦Nil୦int{}}
	} else if _tail, ok := l.tail.(instantiate୦୦Cons୦int); ok {
		newTail = _tail.append(last)
	}
	return instantiate୦୦Cons୦int{l.head, newTail}
}

//line main.go2:70
type instantiate୦୦List୦string interface {
//line main.go2:7
 Reverse() instantiate୦୦List୦string
}
//line main.go2:8
type instantiate୦୦Nil୦string struct{}

//line main.go2:36
func (this instantiate୦୦Nil୦string,) Reverse() instantiate୦୦List୦string {
	return this
}

//line main.go2:38
type instantiate୦୦Cons୦string struct {
//line main.go2:12
 head string
			tail instantiate୦୦List୦string
}

func (this instantiate୦୦Cons୦string,) Reverse() instantiate୦୦List୦string {
	var xs instantiate୦୦List୦string = this
	var ys instantiate୦୦List୦string = instantiate୦୦Nil୦string{}
	for {
		if _, ok := xs.(instantiate୦୦Nil୦string); ok {
			return ys
		}
		if _xs, ok := xs.(instantiate୦୦Cons୦string); ok {
			ys = instantiate୦୦Cons୦string{
				head: _xs.head,
				tail: ys,
			}
			xs = _xs.tail
		}
	}
}

//line main.go2:62
func (l instantiate୦୦Cons୦string,) append(last string) instantiate୦୦List୦string {
	var newTail instantiate୦୦List୦string
	if _, ok := l.tail.(instantiate୦୦Nil୦string); ok {
		newTail = instantiate୦୦Cons୦string{last, instantiate୦୦Nil୦string{}}
	} else if _tail, ok := l.tail.(instantiate୦୦Cons୦string); ok {
		newTail = _tail.append(last)
	}
	return instantiate୦୦Cons୦string{l.head, newTail}
}

//line main.go2:70
type Importable୦ int

//line main.go2:70
var _ = fmt.Errorf
//line main.go2:70
var _ = strconv.AppendBool

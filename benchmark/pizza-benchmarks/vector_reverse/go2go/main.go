// Code generated by go2go; DO NOT EDIT.


//line main.go2:1
package main

//line main.go2:1
import (
//line main.go2:1
 "fmt"
//line main.go2:1
 "strconv"
//line main.go2:1
)

//line main.go2:39
func BenchmarkVectorReverse_int() {
	const iterations = 10000
	v := instantiate୦୦Vector୦int{
		elementData:  make([]int, iterations),
		elementCount: iterations,
	}
	for i := 0; i < iterations; i++ {
		v.set(i, i)
	}
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
		v.reverseElements()
	}
}

func BenchmarkVectorReverse_string() {
	const iterations = 10000
	v := instantiate୦୦Vector୦string{
		elementData:  make([]string, iterations),
		elementCount: iterations,
	}
	for i := 0; i < iterations; i++ {
		v.set(i, strconv.Itoa(i))
	}
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
		v.reverseElements()
	}
}

func BenchmarkStaticVectorReverse_int() {
	const iterations = 10000
	v := instantiate୦୦Vector୦int{
		elementData:  make([]int, iterations),
		elementCount: iterations,
	}
	for i := 0; i < iterations; i++ {
		v.set(i, i)
	}
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
//line main.go2:85
  instantiate୦୦externalReverseElements୦int(&v)
//line main.go2:87
 }
}

func BenchmarkStaticVectorReverse_string() {
	const iterations = 10000
	v := instantiate୦୦Vector୦string{
		elementData:  make([]string, iterations),
		elementCount: iterations,
	}
	for i := 0; i < iterations; i++ {
		v.set(i, strconv.Itoa(i))
	}
	for i := 0; i < iterations; i++ {
		if i%100 == 0 {

		}
//line main.go2:102
  instantiate୦୦externalReverseElements୦string(&v)
//line main.go2:104
 }
}

func main() {
	fmt.Println(1)
	BenchmarkVectorReverse_int()
	fmt.Println(2)
	BenchmarkVectorReverse_string()
	fmt.Println(3)
	BenchmarkStaticVectorReverse_int()
	fmt.Println(4)
	BenchmarkStaticVectorReverse_string()
	fmt.Println(5)
}

//line main.go2:117
type instantiate୦୦Vector୦int struct {
//line main.go2:7
 elementData  []int
			elementCount int
}

func (v *instantiate୦୦Vector୦int,) reverseElements() {
	for i := 0; i < v.elementCount/2; i++ {
		e := v.elementData[v.elementCount-i-1]
		v.elementData[v.elementCount-i-1] = v.elementData[i]
		v.elementData[i] = e
	}
}

func (v *instantiate୦୦Vector୦int,) get(i int) int {
	return v.elementData[i]
}

func (v *instantiate୦୦Vector୦int,) set(i int, x int) {
	v.elementData[i] = x
}

func (v *instantiate୦୦Vector୦int,) size() int {
	return len(v.elementData)
}

//line main.go2:29
type instantiate୦୦Vector୦string struct {
//line main.go2:7
 elementData  []string
			elementCount int
}

func (v *instantiate୦୦Vector୦string,) reverseElements() {
	for i := 0; i < v.elementCount/2; i++ {
		e := v.elementData[v.elementCount-i-1]
		v.elementData[v.elementCount-i-1] = v.elementData[i]
		v.elementData[i] = e
	}
}

func (v *instantiate୦୦Vector୦string,) get(i int) string {
	return v.elementData[i]
}

func (v *instantiate୦୦Vector୦string,) set(i int, x string) {
	v.elementData[i] = x
}

func (v *instantiate୦୦Vector୦string,) size() int {
	return len(v.elementData)
}

func instantiate୦୦externalReverseElements୦int(v *instantiate୦୦Vector୦int,) {
	for i := 0; i < v.size()/2; i++ {
		e := v.get(v.size() - i - 1)
		v.set(v.size()-i-1, v.get(i))
		v.set(i, e)
	}
}
//line main.go2:31
func instantiate୦୦externalReverseElements୦string(v *instantiate୦୦Vector୦string,) {
	for i := 0; i < v.size()/2; i++ {
		e := v.get(v.size() - i - 1)
		v.set(v.size()-i-1, v.get(i))
		v.set(i, e)
	}
}

//line main.go2:37
type Importable୦ int

//line main.go2:37
var _ = fmt.Errorf
//line main.go2:37
var _ = strconv.AppendBool

// Code generated by go2go; DO NOT EDIT.


//line main.go2:1
package main

//line main.go2:1
import "fmt"

//line main.go2:5
const TEST_SIZE = 3000000

type any interface{}

//line main.go2:42
func ListInsert_int8() instantiate୦୦List୦int8 {
	var l instantiate୦୦List୦int8 = instantiate୦୦Nil୦int8{}
	for i := 0; i < TEST_SIZE; i++ {
		l = instantiate୦୦Cons୦int8{
			head: int8(1),
			tail: l,
		}
	}
	return l
}

func ListInsert_int32() instantiate୦୦List୦int32 {
	var l instantiate୦୦List୦int32 = instantiate୦୦Nil୦int32{}
	for i := 0; i < TEST_SIZE; i++ {
		l = instantiate୦୦Cons୦int32{
			head: int32(1),
			tail: l,
		}
	}
	return l
}

func ListInsert_int64() instantiate୦୦List୦int64 {
	var l instantiate୦୦List୦int64 = instantiate୦୦Nil୦int64{}
	for i := 0; i < TEST_SIZE; i++ {
		l = instantiate୦୦Cons୦int64{
			head: int64(1),
			tail: l,
		}
	}
	return l
}

func ListFind_int8(l instantiate୦୦List୦int8,) bool {
	b := true
	for i := 0; i < TEST_SIZE; i += 10000 {
		b = b != l.Contains(int8(i))
	}
	return b
}

func ListFind_int32(l instantiate୦୦List୦int32,) bool {
	b := true
	for i := 0; i < TEST_SIZE; i += 10000 {
		b = b != l.Contains(int32(i))
	}
	return b
}

func ListFind_int64(l instantiate୦୦List୦int64,) bool {
	b := true
	for i := 0; i < TEST_SIZE; i += 10000 {
		b = b != l.Contains(int64(i))
	}
	return b
}

func main() {
	fmt.Println(1)
	l := ListInsert_int8()
	fmt.Println(2)
	ListFind_int8(l)
	fmt.Println(3)
	l2 := ListInsert_int32()
	fmt.Println(2)
	ListFind_int32(l2)
	fmt.Println(3)
	l3 := ListInsert_int64()
	fmt.Println(2)
	ListFind_int64(l3)
	fmt.Println(3)
}

//line main.go2:113
type instantiate୦୦List୦int8 interface {
//line main.go2:10
 Contains(x int8) bool
}
//line main.go2:11
type instantiate୦୦Nil୦int8 struct{}

//line main.go2:38
func (n instantiate୦୦Nil୦int8,) Contains(x int8) bool {
	return false
}

//line main.go2:40
type instantiate୦୦Cons୦int8 struct {
//line main.go2:15
 head int8
			tail instantiate୦୦List୦int8
}

func (c instantiate୦୦Cons୦int8,) Contains(x int8) bool {
	var xs instantiate୦୦List୦int8 = c
	for {
		if xs_, ok := xs.(instantiate୦୦Cons୦int8); ok {
			if xs_.head == x {
				return true
			} else {
				xs = xs_.tail
			}
		}
		if _, ok := xs.(instantiate୦୦Nil୦int8); ok {
			return false
		}
	}
}

//line main.go2:33
type instantiate୦୦List୦int32 interface {
//line main.go2:10
 Contains(x int32) bool
}
//line main.go2:11
type instantiate୦୦Nil୦int32 struct{}

//line main.go2:38
func (n instantiate୦୦Nil୦int32,) Contains(x int32) bool {
	return false
}

//line main.go2:40
type instantiate୦୦Cons୦int32 struct {
//line main.go2:15
 head int32
			tail instantiate୦୦List୦int32
}

func (c instantiate୦୦Cons୦int32,) Contains(x int32) bool {
	var xs instantiate୦୦List୦int32 = c
	for {
		if xs_, ok := xs.(instantiate୦୦Cons୦int32); ok {
			if xs_.head == x {
				return true
			} else {
				xs = xs_.tail
			}
		}
		if _, ok := xs.(instantiate୦୦Nil୦int32); ok {
			return false
		}
	}
}

//line main.go2:33
type instantiate୦୦List୦int64 interface {
//line main.go2:10
 Contains(x int64) bool
}
//line main.go2:11
type instantiate୦୦Nil୦int64 struct{}

//line main.go2:38
func (n instantiate୦୦Nil୦int64,) Contains(x int64) bool {
	return false
}

//line main.go2:40
type instantiate୦୦Cons୦int64 struct {
//line main.go2:15
 head int64
			tail instantiate୦୦List୦int64
}

func (c instantiate୦୦Cons୦int64,) Contains(x int64) bool {
	var xs instantiate୦୦List୦int64 = c
	for {
		if xs_, ok := xs.(instantiate୦୦Cons୦int64); ok {
			if xs_.head == x {
				return true
			} else {
				xs = xs_.tail
			}
		}
		if _, ok := xs.(instantiate୦୦Nil୦int64); ok {
			return false
		}
	}
}

//line main.go2:33
type Importable୦ int

//line main.go2:33
var _ = fmt.Errorf

package main

import "fmt"
//import "strconv"

//https://github.com/miniboxing/miniboxing-plugin/blob/bc53d7afe3bd208a02a8d8d6e9bb0b9f57fe29de/tests/benchmarks/src/miniboxing/benchmarks/launch/BenchmarkingTest.scala#L45-L50
const TEST_SIZE = 3000000//100000000 //2000000, 3000000

type Any interface {}

type ResizableArray[a comparable] struct {
	size int
	elemCount int
	array []a//T
	newArray []a//T
}

func NewResizableArray[a comparable]() ResizableArray[a] {
	return ResizableArray[a]{
		size:      4,
		elemCount: 0,
		array:     make([]a, 4),
		newArray:  nil,
	}
}

func (ra *ResizableArray[a]) extend() {
	if ra.elemCount == ra.size {
		pos := 0
		ra.newArray = make([]a/*T*/, 2 * ra.size)
		for pos < ra.size {
			ra.newArray[pos] = ra.array[pos]
			pos += 1
		}
		ra.array = ra.newArray
		ra.size *= 2
	}
}

func (ra *ResizableArray[a]) add(elem a/*T*/) {
	ra.extend()
	ra.array[ra.elemCount] = elem
	ra.elemCount += 1
}

func (ra *ResizableArray[a]) reverse() {
	pos := 0
	for pos * 2 < ra.elemCount {
		tmp1 := ra.array[pos]
		tmp2 := ra.array[ra.elemCount - pos - 1]
		ra.array[pos] = tmp2
		ra.array[ra.elemCount - pos - 1] = tmp1
		pos +=1
	}
}

func (ra *ResizableArray[a]) contains(elem a/*T*/) bool {
	pos := 0
	for pos < ra.elemCount {
		if ra.array[pos] == elem {
			return true
		}
		pos += 1
	}
	return false
}

//https://github.com/miniboxing/miniboxing-plugin/blob/wip/tests/benchmarks/src/miniboxing/benchmarks/launch/tests/GenericBenchTest.scala
func arrayInsert_int8() ResizableArray[int8] {
	a := NewResizableArray[int8]()
	for i := 0; i < TEST_SIZE; i++ {
		a.add(int8(4))
	}
	return a
}

func arrayInsert_int32() ResizableArray[int32] {
	a := NewResizableArray[int32]()
	for i := 0; i < TEST_SIZE; i++ {
		a.add(int32(4))
	}
	return a
}

func arrayInsert_int64() ResizableArray[int64] {
	a := NewResizableArray[int64]()
	for i := 0; i < TEST_SIZE; i++ {
		a.add(int64(4))
	}
	return a
}

func arrayReverse[t comparable](a ResizableArray[t]) ResizableArray[t] {
	a.reverse()
	return a
}


func arrayFind_int8(a ResizableArray[int8]) bool {
	i := 0
	b := true
	for i < TEST_SIZE {
		b = b != a.contains(int8(i))
		i += 10000
	}
	return b
}

func arrayFind_int32(a ResizableArray[int32]) bool {
	i := 0
	b := true
	for i < TEST_SIZE {
		b = b != a.contains(int32(i))
		i += 10000
	}
	return b
}

func arrayFind_int64(a ResizableArray[int64]) bool {
	i := 0
	b := true
	for i < TEST_SIZE {
		b = b != a.contains(int64(i))
		i += 10000
	}
	return b
}

func main_int8() {
	fmt.Println(1)
	a := arrayInsert_int8()
	//fmt.Println(a)
	fmt.Println(2)
	a = arrayReverse(a)
	//fmt.Println(a)
	fmt.Println(3)

	arrayFind_int8(a)
	fmt.Println(4)
}

func main_int32() {
	fmt.Println(1)
	a := arrayInsert_int32()
	//fmt.Println(a)
	fmt.Println(2)
	a = arrayReverse(a)
	//fmt.Println(a)
	fmt.Println(3)

	arrayFind_int32(a)
	fmt.Println(4)
}

func main_int64() {
	fmt.Println(1)
	a := arrayInsert_int64()
	//fmt.Println(a)
	fmt.Println(2)
	a = arrayReverse(a)
	//fmt.Println(a)
	fmt.Println(3)

	arrayFind_int64(a)
	fmt.Println(4)
}

func main() {
	main_int8()
	main_int32()
	main_int64()
}
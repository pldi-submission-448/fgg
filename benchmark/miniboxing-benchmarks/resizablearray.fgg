package main;

//import "fmt"

//https://github.com/miniboxing/miniboxing-plugin/blob/bc53d7afe3bd208a02a8d8d6e9bb0b9f57fe29de/tests/benchmarks/src/miniboxing/benchmarks/launch/BenchmarkingTest.scala#L45-L50
//const TEST_SIZE = 100//100000000 //2000000, 3000000

/*type ResizableArray struct {
	size int
	elemCount int
	array []int//T
	newArray []int//T
}*/

type int[type] struct {};
type long[type] struct {};
type double[type] struct {};
type bool[type] struct {};
type Any[type ] interface {};

type Dummy[type ] struct {};

type ResizableArray[type a Any[]] struct {
	size int[];
	elemCount int[];
	array a;//T
	newArray a//T
};

/*func NewResizableArray() ResizableArray {
	return ResizableArray{
		size:      4,
		elemCount: 0,
		array:     make([]int, 4),
		newArray:  nil,
	}
}*/

/*func (ra *ResizableArray) extend() {
	if ra.elemCount == ra.size {
		pos := 0
		ra.newArray = make([]int/*T*/ /*, 2 * ra.size)
		for pos < ra.size {
			ra.newArray[pos] = ra.array[pos]
			pos += 1
		}
		ra.array = ra.newArray
		ra.size *= 2
	}
};*/

func (ra ResizableArray[type a Any[]]) extend[type]() Dummy[]{
    t1 := ra.elemCount;
    t2 := ra.size;
    t3 := ra.newArray;
    t4 := ra.array;
    return Dummy[]{}
};

/*func (ra *ResizableArray) add(elem int/*T*/ /*) {
	ra.extend()
	ra.array[ra.elemCount] = elem
	ra.elemCount += 1
}*/

func (ra ResizableArray[type a Any[]]) add[type](elem a) Dummy[] {
	t1 := ra.extend[]();
	return Dummy[]{}
};

/*func (ra *ResizableArray) reverse() {
	pos := 0
	for pos * 2 < ra.elemCount {
		tmp1 := ra.array[pos]
		tmp2 := ra.array[ra.elemCount - pos - 1]
		ra.array[pos] = tmp2
		ra.array[ra.elemCount - pos - 1] = tmp1
	}
}*/

func (ra ResizableArray[type a Any[]]) reverse[type]() Dummy[]{
    return Dummy[]{}
};

/*func (ra ResizableArray) contains(elem int/*T*/ /*) bool {
	pos := 0
	for pos < ra.elemCount {
		if ra.array[pos] == elem {
			return true
		}
		pos += 1
	}
	return false
}*/

func (ra ResizableArray[type a Any[]]) contains[type](elem a) bool[] {
    return bool[]{}
};

//https://github.com/miniboxing/miniboxing-plugin/blob/wip/tests/benchmarks/src/miniboxing/benchmarks/launch/tests/GenericBenchTest.scala
func (this Dummy[type ]) arrayInsert[type a Any[]](elem a) ResizableArray[a] {
	/*a := NewResizableArray()
	for i := 0; i < TEST_SIZE; i++ {
		a.add(i)
	}*/
	x := ResizableArray[a]{int[]{}, int[]{}, elem, elem}.add[](elem);
	return ResizableArray[a]{int[]{}, int[]{}, elem, elem}
};

func (this Dummy[type ]) arrayReverse[type a Any[]](a ResizableArray[a]) ResizableArray[a] {
	x := a.reverse[]();
	return a
};

/*func arrayReverse(a ResizableArray) ResizableArray {
	a.reverse()
	return a
};*/

/*func arrayFind(a ResizableArray) bool {
	i := 0
	b := true
	for i < TEST_SIZE {
		b = b != a.contains(i)
		i += 1//10000
	}
	return b
}*/

func (this Dummy[type ]) arrayFind[type a Any[]](x ResizableArray[a], elem a) bool[] {
	/*i := 0
	b := true
	for i < TEST_SIZE {
		b = b != a.contains(i)
		i += 1//10000
	}*/
	t1 := x.contains[](elem);
	return bool[]{}
};

func (this Dummy[type]) Main[type t Any[]](elem t) Dummy[] {
//	fmt.Println(1)
	a := this.arrayInsert[t](elem);

//	fmt.Println(a)
//	fmt.Println(2)
    a2 := Dummy[]{}.arrayReverse[t](a);
//	a = arrayReverse(a)
//	fmt.Println(a)
//	fmt.Println(3)
    t1 := Dummy[]{}.arrayFind[t](a2, elem);
//	fmt.Println(arrayFind(a))
//	fmt.Println(4)
    return this
};

func main() {
    _ = Dummy[]{}.Main[int[]](int[]{}).Main[long[]](long[]{}).Main[double[]](double[]{})
}